import globimport pandas as pdimport matplotlib.pyplot as pltimport seaborn as snsimport osimport geopandas as gpimport pandas_datareader.data as webfrom pandas_datareader import wbfrom datetime import datetimeimport statsmodels.api as smimport statsmodels.formula.api as smfpath = r'/Users/shweta/Documents//GitHub/final-project-crime_analysis_chicago_finalproject' # Change accordinglyos.chdir(path)sentiment = pd.read_csv('Data/Police_Sentiment_Scores.csv')crimes_2011 = pd.read_csv('Data/Crimes_2011_to_2021.csv')# How we created this filtered dataset for crime from 2011: # Download data from https://data.cityofchicago.org/Public-Safety/Crimes-2001-to-Present/ijzp-q8t2#crimes = pd.read_csv('Data/Crimes_-_2001_to_Present.csv')#crimes_2011 = crimes.loc[crimes['Year'] >= 2011]#crimes_2011 = crimes_2011.loc[crimes_2011['Year'] < 2022]#crimes_2011.to_csv(os.path.join(path,'Data/Crimes_2011_to_2021.csv', index=False)#%% functions for data wranglingdef data_agg_two(df,agg,agg2,var,op):    if op == 'add':        data = df.groupby([agg,agg2])[var].sum()        #data = data.rename({'count':"vals"},axis='columns')    else:        data = df.groupby([agg,agg2])[var].mean()        #data = data.rename({var:"vals"},axis='columns')    data = data.reset_index()    data = pd.pivot(data,index=[agg],                   columns=agg2,                   values=var)    data = data.reset_index()    return datadef data_agg_one(df,agg,var,op):    if op == 'add':        data = df.groupby(agg)[var].sum()    else:        data = df.groupby(agg)[var].mean()    data = data.reset_index()    return datadef data_rank(df,rankcol):    df['rank'] = df[rankcol].rank(ascending=False)    return dfdef data_agg_three(df,agg,agg2,agg3,var,op):    if op == 'add':        data = df.groupby([agg,agg2,agg3])[var].sum()    else:        data = df.groupby([agg,agg2,agg3])[var].mean()    data = data.reset_index()    return data#%% Section 1: crime in chicago and other cities over timecrimes_2011['month'] = pd.to_datetime(crimes_2011['Date']).dt.monthcrimes_2011['year'] = pd.to_datetime(crimes_2011['Date']).dt.yearcrimes_2011['crime'] = 1crimes_yoy = data_agg_one(crimes_2011,'year','crime','add')crimes_yoy['crime']=crimes_yoy['crime']/2600crimes_yoy = crimes_yoy.set_index('year')crimes_dt = pd.read_csv('Data/RMS_Crime_Incidents.csv', low_memory=False)crimes_dt['date'] = pd.to_datetime(crimes_dt['ibr_date']).dt.datecrimes_dt['year'] = pd.to_datetime(crimes_dt['date']).dt.yearcrimes_dt['month'] = pd.to_datetime(crimes_dt['ibr_date']).dt.monthcrimes_dt['time'] = pd.to_datetime(crimes_dt['ibr_date']).dt.timecrimes_dt['crime'] = 1crimes_dt = crimes_dt.round()crimes_dt = crimes_dt.loc[crimes_dt['year'] >= 2017]crimes_dt = crimes_dt.loc[crimes_dt['year'] < 2022]crimes_dt_yoy = data_agg_one(crimes_dt,'year','crime','add')crimes_dt_yoy['crime']=crimes_dt_yoy['crime']/600crimes_dt_yoy = crimes_dt_yoy.set_index('year')crimes_dt_yoy.index.astype('int64')path = 'Data/Boston'csv_files = glob.glob(os.path.join(path, "*.csv"))crimes_bos = pd.DataFrame()for file in csv_files:    df = pd.read_csv(file, low_memory=False)    crimes_bos = pd.concat([crimes_bos,df],axis=0)    crimes_bos = crimes_bos.rename(columns=str.lower)crimes_bos['crime'] = 1crimes_bos_yoy = data_agg_one(crimes_bos,'year','crime','add')crimes_bos_yoy['crime']=crimes_bos_yoy['crime']/655crimes_bos_yoy = crimes_bos_yoy.set_index('year')crimes_bos_yoy.index.astype('int64')crimes_all = crimes_yoy.merge(crimes_dt_yoy, on='year', how='left')crimes_all = crimes_all.merge(crimes_bos_yoy, on='year', how='left')crimes_all = crimes_all.rename(columns={'crime_x': 'Chicago', 'crime_y': 'Detroit', 'crime': 'Boston'})fig, axs = plt.subplots(1,1, figsize=(8,6))sns.set_theme()ax = sns.lineplot(data=crimes_all) ax = ax.set(title='Crimes Across Cities',           xlabel='Year',           ylabel="Number of Crimes (per 1000 residents)",           ylim = (50,200),           xlim = (2015,2021))ax = plt.legend(bbox_to_anchor=(1, 1),bbox_inches='tight', loc='upper left', borderaxespad=0)plt.savefig('Plots/Fig1.1-CrimeCompCities.png')crimes_month = data_agg_two(crimes_2011,'month','year','crime','add')crimes_month['month'] = pd.to_datetime(crimes_month['month'], format='%m').dt.month_name().str.slice(stop=3)crimes_month = crimes_month.set_index('month')crimes_month = crimes_month/1000fig.clear()fig, axs = plt.subplots(1,1, figsize=(10,6))sns.set_theme()ax = sns.lineplot(data=crimes_month)ax = ax.set(title='Crimes by Month (past 10 years)',           xlabel='Months',           ylabel="Number of Crimes ('000)")ax = plt.legend(bbox_to_anchor=(1, 1), loc='upper left', borderaxespad=0)plt.savefig('Plots/Fig1.2-ChicagoCrimeYoY_MoM.png')# Citations:    # https://www.geeksforgeeks.org/read-multiple-csv-files-into-separate-dataframes-in-python/#%% Section 2: sentiment in chicago over timesentiment['month'] = pd.to_datetime(sentiment['START_DATE']).dt.monthsentiment['Year'] = pd.to_datetime(sentiment['START_DATE']).dt.yearsentiment_filter = sentiment.loc[sentiment['Year'] < 2022]sentiment_filter = sentiment_filter.loc[sentiment_filter['Year'] >= 2018]safety_overtime = data_agg_two(sentiment_filter,'month','Year','SAFETY','avg')safety_overtime['month'] = pd.to_datetime(safety_overtime['month'], format='%m').dt.month_name().str.slice(stop=3)safety_overtime = safety_overtime.set_index('month')new_order = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']safety_overtime = safety_overtime.reindex(new_order, axis=0)fig.clear()sns.set_theme()ax = sns.lineplot(data=safety_overtime)ax = ax.set(title='Safety Sentiment over the Years',           xlabel='Months',           ylabel="Safety Score")ax = plt.legend(loc='upper right', borderaxespad=0)plt.savefig('Plots/Fig2.1-SentimentYoYMoM.png')trust_overtime = data_agg_two(sentiment_filter,'month','Year','TRUST','avg')trust_overtime['month'] = pd.to_datetime(trust_overtime['month'], format='%m').dt.month_name().str.slice(stop=3)trust_overtime = trust_overtime.set_index('month')trust_overtime = trust_overtime.reindex(new_order, axis=0)fig.clear()sns.set_theme()ax = sns.lineplot(data=trust_overtime)ax = ax.set(title='Trust in Police over the Years',           xlabel='Months',           ylabel="Trust in Police")ax = plt.legend(loc='upper right', borderaxespad=0)plt.savefig('Plots/Fig2.2-TrustYoYMoM.png')byrace = ['S_RACE_AFRICAN_AMERICAN',         'S_RACE_ASIAN_AMERICAN',         'S_RACE_HISPANIC',         'S_RACE_WHITE',         'T_RACE_AFRICAN_AMERICAN',         'T_RACE_ASIAN_AMERICAN',         'T_RACE_HISPANIC',         'T_RACE_WHITE',]sentiment_byrace = sentiment.groupby(['CITY'])[byrace].mean().transpose().reset_index()sentiment_byrace[['variable','x','race','race2']]=sentiment_byrace['index'].str.split('_',expand=True)sentiment_byrace=sentiment_byrace.drop(['x','index','race2'], axis=1)sentiment_byrace=sentiment_byrace.replace(['S','T','AFRICAN'],                                          ['Safety Score','Trust in Police','BLACK'])fig.clear()sns.set_theme()ax = sns.barplot(data=sentiment_byrace,x='race',y='chicago',hue='variable',palette='flare')ax = ax.set(title='Sentiment By Race',           xlabel='',           ylabel="Reported Scores",           ylim=(30,80))ax = plt.legend(loc='upper right', borderaxespad=0)plt.savefig('Plots/Fig2.3-SentimentByRace.png')#%% Scatter plot: relationship b/w crime count and safety scores across PDs:    crimes_month_pd = data_agg_three(crimes_2011,'month', 'Year','District','crime','add')safety_month_pd = data_agg_three(sentiment_filter,'month', 'Year','DISTRICT','SAFETY','avg')safety_month_pd.rename(columns = {'DISTRICT': 'District'}, inplace = True)crime_safety_combined = safety_month_pd.merge(crimes_month_pd, on = ['District', 'month', 'Year'], how = 'outer').dropna()crime_safety_combined.to_csv('Data/scatter_data.csv', index=False)fig, ax = plt.subplots()ax = sns.scatterplot(data=crime_safety_combined, x="crime", y="SAFETY", s=10)ax.set_ylabel('Mean safety scores (monthly)')ax.set_xlabel('Crime count (monthly)')ax.set_title('Relationship between crime counts and safety scores\nacross police districts in Chicago')plt.savefig('Plots/Fig3.1-Scatterplot.png')# Citations:    # https://stackoverflow.com/questions/52785101/seaborn-scatterplot-marker-size-for-all-markers    # https://stackoverflow.com/questions/53549492/joining-two-pandas-dataframes-based-on-multiple-conditions    # https://www.geeksforgeeks.org/pandas-groupby-and-computing-mean/ #%% OLS Model of crime and sentimentcrime_regmodel = smf.ols('SAFETY ~ crime', data=crime_safety_combined)reg_result = crime_regmodel.fit()reg_summary = reg_result.summary()reg_summary#For just the coefficients: reg_result.params# The required regression coefficient: -0.0077# Function to calculate regression coefficient for each district: def reg_pd(pd):    regdf = crime_safety_combined[crime_safety_combined["District"]==pd]    reg_pd = smf.ols('SAFETY ~ crime', data=regdf)    reg_pd_result = reg_pd.fit()    reg_pd_summary = reg_pd_result.summary()    return reg_pd_summary# Note to grader when using the function: # Data for districts 13, 21 and 23 are missing across both the datasets. # Citations:    # DP 1 Lecture 17 slides